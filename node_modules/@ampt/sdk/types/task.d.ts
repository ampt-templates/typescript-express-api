import { EventHandler } from './events'

export declare interface Task {
  every(expression: string, payload?: any): Task
  cron(expression: string, payload?: any): Task
  run(after?: string | any, payload?: any): Promise<TaskRunResult>

  // lifecycle events
  on(name: TaskLifeCycleEvent, handler: EventHandler): Task
}
export declare interface TaskOptions {
  timeout?: number
  attempts?: number
}
export declare interface TaskEvent {
  payload: any
}
export declare interface TaskContext {
  setTimeout(ms: number): void
  progress(message: string, percent: number): void
}
export declare interface TaskRunResult {
  id: string
}
export declare interface TaskHandler {
  (event: TaskEvent, context: TaskContext): Promise<any>
}
export declare type TaskLifeCycleEvent = 'started' | 'completed' | 'failed' | 'progress'

export declare type TaskExecutionState = 'created' | 'scheduled' | 'submitted' | 'completed' | 'failed'

export declare interface TaskExecutionStatus {
  id: string
  name: string
  state: TaskExecutionState
  body?: string

  createdAt: number
  scheduledAt?: number
  submittedAt?: number
  startedAt?: number
  failedAt?: number
  completedAt?: number
  progressedAt?: number

  result?: string
  errorMessage?: string
  errorStack?: string
  progressMessage?: string
  progressPercent?: number
}

export declare type TaskFactoryFunction = {
  (name: string, handler: TaskHandler): Task
  (name: string, config: TaskOptions, handler: TaskHandler): Task
  status: (executionId: string) => Promise<TaskExecutionStatus | undefined>
}

declare const task: TaskFactoryFunction

export { task }
export default task
