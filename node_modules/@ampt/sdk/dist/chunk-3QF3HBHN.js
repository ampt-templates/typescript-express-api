import { createRequire as topLevelCreateRequire } from 'module'
const require = topLevelCreateRequire(import.meta.url || __dirname)

// ../../lib/runtime-logging/index.ts
function systemError(errOrMsg, _msg) {
  const err = typeof errOrMsg === "string" ? void 0 : errOrMsg;
  const msg = typeof errOrMsg === "string" ? errOrMsg : _msg;
  process.stdout.write(
    JSON.stringify({
      _slsLog: true,
      time: Date.now(),
      level: 50,
      msg,
      ...err && { err: { message: err.message, stack: err.stack, code: err.code, name: err.name } }
    }) + "\n"
  );
}
function systemLog(objOrMsg, _msg) {
  const obj = typeof objOrMsg === "string" ? {} : objOrMsg;
  const msg = typeof objOrMsg === "string" ? objOrMsg : _msg;
  process.stdout.write(
    JSON.stringify({
      _slsLog: true,
      time: Date.now(),
      level: 30,
      msg,
      ...obj
    }) + "\n"
  );
}
function applicationError(errOrMsg, _msg) {
  const err = typeof errOrMsg === "string" ? void 0 : errOrMsg;
  const msg = typeof errOrMsg === "string" ? errOrMsg : _msg;
  process.stdout.write(
    JSON.stringify({
      time: Date.now(),
      level: 50,
      msg,
      ...err && { err: { message: err.message, stack: err.stack, code: err.code, name: err.name } }
    }) + "\n"
  );
}

export {
  systemError,
  systemLog,
  applicationError
};
